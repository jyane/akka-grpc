@(service: akka.grpc.gen.scaladsl.Service)

package @service.packageName

import scala.concurrent.ExecutionContext
import scala.concurrent.Future

import akka.NotUsed
import akka.stream.scaladsl.Source
import akka.stream.Materializer
import akka.grpc.ProtobufSerializer
import akka.grpc.scaladsl.GrpcMarshalling
import akka.http.scaladsl.marshalling.Marshaller
import akka.http.scaladsl.marshalling.ToResponseMarshaller
import akka.http.scaladsl.model.HttpRequest
import akka.http.scaladsl.unmarshalling.FromRequestUnmarshaller
import akka.http.scaladsl.unmarshalling.Unmarshaller

object @{service.name}Marshallers {
  @for(serializer <- service.serializers) {
  implicit val @serializer.name = @{service.packageName}.@{service.name}.Serializers.@{serializer.name}
  }

  implicit def toUnmarshaller[T](implicit serializer: ProtobufSerializer[T], mat: Materializer): FromRequestUnmarshaller[T] =
    Unmarshaller((ec: ExecutionContext) ⇒ (req: HttpRequest) ⇒ GrpcMarshalling.unmarshal(req, serializer, mat))

  implicit def toStreamUnmarshaller[T](implicit serializer: ProtobufSerializer[T], mat: Materializer): FromRequestUnmarshaller[Source[T, NotUsed]] =
    Unmarshaller((ec: ExecutionContext) ⇒ (req: HttpRequest) ⇒ GrpcMarshalling.unmarshalStream(req, serializer, mat))

  implicit def toMarshaller[T](implicit serializer: ProtobufSerializer[T], mat: Materializer): ToResponseMarshaller[T] =
    Marshaller.opaque((response: T) ⇒ GrpcMarshalling.marshal(response, serializer, mat))

  implicit def toStreamMarshaller[T](implicit serializer: ProtobufSerializer[T], mat: Materializer): ToResponseMarshaller[Source[T, NotUsed]] =
    Marshaller.opaque((response: Source[T, NotUsed]) ⇒ GrpcMarshalling.marshalStream(response, serializer, mat))
}
